# GitHub Action to build a custom integration archive of the Roon integration driver
---
name: "Build & Release"

on:
  workflow_dispatch:
  push:
    paths:
      - "**/*.ts"
      - "**/*.js"
      - ".github/**/*.yml"
      - ".nvmrc"
      - "package-lock.json"
      - "driver.json"
      - "tsconfig.json"
  pull_request:
    types: [opened, synchronize, reopened]

env:
  INTG_NAME: roon
  HASH_FILENAME: uc-intg-roon.hash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # History of 200 should be more than enough to calculate commit count since last release tag.
          fetch-depth: 200

      - name: Fetch all tags to determine version
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          echo "VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)" >> $GITHUB_ENV

      - name: Verify driver.json version for release build
        if: contains(github.ref, 'tags/v')
        run: |
          DRIVER_VERSION="v$(jq .version -r driver.json)"
          if [ "${{ env.VERSION }}" != "$DRIVER_VERSION" ]; then
            echo "Version in driver.json ($DRIVER_VERSION) doesn't match git version tag (${{ env.VERSION }})!"
            exit 1
          fi

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Build
        run: |
          npm install
          npm run build

      - name: Get production modules
        run: |
          rm -Rf node_modules
          npm install --production

      - name: Add version
        run: |
          mkdir -p artifacts
          cd artifacts
          echo ${{ env.VERSION }} > version.txt

      # Integration driver archive requirements:
      #   - TAR GZip archive (either .tgz or .tar.gz file suffix) with a maximum size of 100 MB.
      #   - In the root of the archive, there must be a `driver.json` metadata file describing the custom integration driver.
      #   - The driver binary must be in the `./bin` subdirectory.
      #     - Either a statically linked aarch64 executable named `driver`.
      #     - Or a Node.js file named `driver.js`.
      #   - All application files must be in one of the following subdirectories, other locations are not accessible at runtime:
      #       - `./bin`: application binary folder.
      #       - `./config`: optional configuration data. Path is accessible with `UC_CONFIG_HOME` environment variable.
      #       - `./data`: optional application data. Path is accessible with `UC_DATA_HOME` environment variable.
      - name: Create custom intg archive
        shell: bash
        run: |
          mv dist artifacts/
          mv artifacts/dist artifacts/bin
          mv artifacts/bin/index.js artifacts/bin/driver.js
          cp -r assets artifacts/bin/
          cp package.json artifacts/bin/
          mv node_modules artifacts/bin/
          cp driver.json artifacts/
          # patch metadata to not conflict with pre-installed driver
          jq '.driver_id = "uc_roon_driver_custom" | .name.en = "Roon custom"' driver.json > artifacts/driver.json
          echo "ARTIFACT_NAME=uc-intg-${{ env.INTG_NAME }}-${{ env.VERSION }}-aarch64" >> $GITHUB_ENV

      - name: Create upload artifact
        shell: bash
        run: |
          tar czvf ${{ env.ARTIFACT_NAME }}.tar.gz -C ${GITHUB_WORKSPACE}/artifacts .
          ls -lah

      - uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 3

  release:
    name: Create Release
    # ONLY FOR PR TESTING !!!
    # if: github.ref == 'refs/heads/main' || contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Extract build archives from downloaded files
        run: |
          ls -R
          # extract tar.gz build archives from downloaded artifacts
          # (wrapped in tar from actions/upload-artifact, then extracted into a directory by actions/download-artifact)
          for D in * 
            do if [ -d "${D}" ]; then
              mv $D/* ./
            fi
          done;

      # Use a common timestamp for all matrix build artifacts
      - name: Get timestamp
        run: |
          echo "TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV

      # Add timestamp to development builds
      - name: Create GitHub development build archives
        if: "!contains(github.ref, 'tags/v')"
        run: |
          # append timestamp
          for filename in *.tar.gz; do mv $filename "$(basename $filename .tar.gz)-${{ env.TIMESTAMP }}.tar.gz"; done;
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

      - name: Create Pre-Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "!contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}

      - name: Create GitHub release archives
        if: "contains(github.ref, 'tags/v')"
        run: |
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}
